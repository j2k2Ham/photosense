name: PhotoSense CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'PhotoSense.ReactUI/package.json'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore PhotoSense.sln

      - name: Build
        run: dotnet build PhotoSense.sln --configuration Release --no-restore /warnaserror

      - name: Install React UI deps
        working-directory: PhotoSense.ReactUI
        run: npm ci

      - name: Build React UI
        working-directory: PhotoSense.ReactUI
        run: npm run build

      - name: Test with coverage
        run: >-
          dotnet test PhotoSense.Tests/PhotoSense.Tests.csproj
          --configuration Release
          /p:CollectCoverage=true
          /p:CoverletOutput=coverage/
          /p:CoverletOutputFormat=opencover
          --logger "trx;LogFileName=test-results.trx"

      - name: ReportGenerator (HTML)
        # Use literal block to run two commands sequentially without stray backslashes.
        run: |
          dotnet tool restore
          echo "Listing coverage files" && ls -R . | grep coverage || true
          dotnet tool run reportgenerator "-reports:PhotoSense.Tests/coverage/coverage.opencover.xml" -targetdir:coverage/report "-reporttypes:HtmlSummary;lcov;XmlSummary" -historydir:coverage/history || echo "Report generation failed (will succeed once coverage file exists)"
        if: always()

      - name: Enforce coverage thresholds (Line >= 90% / Branch >= 85%)
        if: success()
        run: |
          set -e
          thresholdLine=0.90
          thresholdBranch=0.85
          coverageXml=PhotoSense.Tests/coverage/coverage.opencover.xml
          if [ ! -f "$coverageXml" ]; then
            echo "Coverage file not found: $coverageXml"; ls -R PhotoSense.Tests || true; exit 1
          fi
          # Extract sequence (line) and branch coverage from OpenCover XML summary attributes
          linePct=$(grep -oP 'sequenceCoverage="\K[0-9.]+' "$coverageXml" | head -1)
          branchPct=$(grep -oP 'branchCoverage="\K[0-9.]+' "$coverageXml" | head -1)
          if [ -z "$linePct" ] || [ -z "$branchPct" ]; then
            echo "Could not extract coverage metrics. Dumping first 40 lines:";
            head -40 "$coverageXml"; exit 1;
          fi
          echo "Line coverage: $linePct% (threshold: $(awk -v t=$thresholdLine 'BEGIN{print t*100}'))"
          echo "Branch coverage: $branchPct% (threshold: $(awk -v t=$thresholdBranch 'BEGIN{print t*100}'))"
          awk -v p=$linePct -v t=$thresholdLine 'BEGIN{ exit (p/100 < t) }' || { echo "Line coverage below threshold"; exit 1; }
          awk -v p=$branchPct -v t=$thresholdBranch 'BEGIN{ exit (p/100 < t) }' || { echo "Branch coverage below threshold"; exit 1; }

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/test-results.trx
            coverage/**

  mutation-test:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore tools
        run: dotnet tool restore

      - name: Run Stryker
        run: >-
          dotnet tool run stryker --config-file stryker-config.json

      - name: Upload Stryker Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-report
          path: StrykerOutput/**
