name: PhotoSense CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore PhotoSense.sln

      - name: Build
        run: dotnet build PhotoSense.sln --configuration Release --no-restore /warnaserror

      - name: Test with coverage
        run: >-
          dotnet test PhotoSense.Tests/PhotoSense.Tests.csproj
          --configuration Release
          /p:CollectCoverage=true
          /p:CoverletOutput=coverage/
          /p:CoverletOutputFormat=opencover
          --logger "trx;LogFileName=test-results.trx"

      - name: ReportGenerator (HTML)
        # Use literal block to run two commands sequentially without stray backslashes.
        run: |
          dotnet tool restore
          echo "Listing coverage files" && ls -R . | grep coverage || true
          dotnet tool run reportgenerator "-reports:PhotoSense.Tests/coverage/coverage.opencover.xml" -targetdir:coverage/report -reporttypes:HtmlSummary;lcov;XmlSummary || echo "Report generation failed (will succeed once coverage file exists)"
        if: always()

      - name: Enforce coverage threshold (Line >= 60%)
        if: success() # only run if previous (non-always) steps succeeded; report step runs always
        run: |
          threshold=0.60
          summary=coverage/report/Summary.xml
          if [ ! -f "$summary" ]; then
            echo "Coverage summary not found: $summary"; exit 1
          fi
          pct=$(grep -oP 'linecoverage="\K[0-9.]+' "$summary" | head -1)
          if [ -z "$pct" ]; then
            echo "Could not extract line coverage from $summary"; exit 1
          fi
            echo "Line coverage: $pct% (threshold: $(awk -v t=$threshold 'BEGIN{print t*100}'))"
          awk -v p=$pct -v t=$threshold 'BEGIN{ exit (p/100 < t) }' || { echo "Coverage below threshold"; exit 1; }

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/test-results.trx
            coverage/**

  mutation-test:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore tools
        run: dotnet tool restore

      - name: Run Stryker
        run: >-
          dotnet tool run stryker --config-file stryker-config.json

      - name: Upload Stryker Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mutation-report
          path: StrykerOutput/**
